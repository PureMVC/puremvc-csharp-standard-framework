<!DOCTYPE html><html><head><title>Controller</title><meta charset="UTF-8" /><link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous" /><link href="styles/default.css" type="text/css" rel="stylesheet" /></head><body><div class="container"><div class="row"><nav class="navigation col-sm-4"><div class="brand"><img src="styles/images/logo.png" /></div><ul><li><a href="index.htm">Documentation</a></li></ul><ul><li><a class="" href="4294967296-PureMVC.Core.htm">PureMVC.Core</a><ul><li><a class="current" href="4294967581.htm">Controller</a><ul><li><a class="" href="4294967581-Constructors.htm">Constructors</a></li><li><a class="" href="4294967581-Fields.htm">Fields</a></li><li><a class="" href="4294967581-Methods.htm">Methods</a></li></ul></li></ul></li></ul></nav><main class="col-sm-8"><div><section class="details"><h1>Controller</h1><div class="summary">A Singleton <span class="code">IController</span> implementation. </div><div class="inheritance"><h2>Inheritance</h2><div class="inherits_from"><span>Object</span><span class="current">Controller</span></div></div><div class="details"><span class="namespace"><em>Namespace:</em> <a href="4294967296-PureMVC.Core.htm">PureMVC.Core</a></span><span class="assembly"><em>Assembly:</em> PureMVC in (PureMVC.dll)
						</span></div><div class="syntax"><h2>Syntax</h2><div class="csharp code"><div>C#</div><pre><span class="keyword">public</span> <span class="keyword">class</span> Controller: IController</pre></div></div></section><section class="remarks"><h2>Remarks</h2><p>In PureMVC, the <span class="code">Controller</span> class follows the  'Command and Controller' strategy, and assumes these  responsibilities:</p><ul><li>Remembering which <span class="code">ICommand</span>s  are intended to handle which <span class="code">INotifications</span>.</li><li>Registering itself as an <span class="code">IObserver</span> with  the <span class="code">View</span> for each <span class="code">INotification</span>  that it has an <span class="code">ICommand</span> mapping for.</li><li>Creating a new instance of the proper <span class="code">ICommand</span>  to handle a given <span class="code">INotification</span> when notified by the <span class="code">View</span>.</li><li>Calling the <span class="code">ICommand</span>'s <span class="code">execute</span>  method, passing in the <span class="code">INotification</span>.</li></ul><p> Your application must register <span class="code">ICommands</span> with the  <span class="code">Controller</span>. </p><p> The simplest way is to subclass <span class="code">Facade</span>,  and use its <span class="code">initializeController</span> method to add your  registrations. </p></section><section class="constructors members"><h2>Constructors</h2><div class="entry row"><div class="col-sm"><a href="4294967582.htm">Controller()</a></div><div class="col-sm"><div class="summary">Constructs and initializes a new controller </div></div></div></section><section class="methods members"><h2>Methods</h2><div class="entry row"><div class="col-sm"><a href="4294967586.htm">ExecuteCommand(INotification)</a></div><div class="col-sm"><div class="summary">If an <span class="code">ICommand</span> has previously been registered  to handle a the given <span class="code">INotification</span>, then it is executed. </div></div></div><div class="entry row"><div class="col-sm"><a href="4294967584.htm">GetInstance(Func&lt;IController&gt;)</a></div><div class="col-sm"><div class="summary"><span class="code">Controller</span> Singleton Factory method. </div></div></div><div class="entry row"><div class="col-sm"><a href="4294967593.htm">HasCommand(String)</a></div><div class="col-sm"><div class="summary">Check if a Command is registered for a given Notification  </div></div></div><div class="entry row"><div class="col-sm"><a href="4294967583.htm">InitializeController()</a></div><div class="col-sm"><div class="summary">Initialize the Singleton <span class="code">Controller</span> instance </div></div></div><div class="entry row"><div class="col-sm"><a href="4294967588.htm">RegisterCommand(String, Func&lt;ICommand&gt;)</a></div><div class="col-sm"><div class="summary">Register a particular <span class="code">ICommand</span> class as the handler  for a particular <span class="code">INotification</span>. </div></div></div><div class="entry row"><div class="col-sm"><a href="4294967591.htm">RemoveCommand(String)</a></div><div class="col-sm"><div class="summary">Remove a previously registered <span class="code">ICommand</span> to <span class="code">INotification</span> mapping. </div></div></div></section><section class="constants members"><h2>Fields</h2><div class="entry row"><div class="col-sm"><a href="4294967596.htm">commandMap</a></div><div class="col-sm"><div class="summary">Mapping of Notification names to Command Class references</div></div></div><div class="entry row"><div class="col-sm"><a href="4294967597.htm">instance</a></div><div class="col-sm"><div class="summary">Singleton instance</div></div></div><div class="entry row"><div class="col-sm"><a href="4294967598.htm">Singleton_MSG</a></div><div class="col-sm"><div class="summary">Message Constants</div></div></div><div class="entry row"><div class="col-sm"><a href="4294967595.htm">view</a></div><div class="col-sm"><div class="summary">Local reference to View</div></div></div></section><section class="seealso"><h2>See also</h2><div><a href="4294967615.htm">View</a></div><div><a href="4294967374.htm">Observer</a></div><div><a href="4294967347.htm">Notification</a></div><div><a href="4294967463.htm">SimpleCommand</a></div><div><a href="4294967455.htm">MacroCommand</a></div></section></div></main></div></div><script src="styles/site.js"></script></body></html>